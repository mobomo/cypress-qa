# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  aws-sam-typescript-layers-example

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Globals:
  Function:
    Environment:
      Variables:
        REGION: ${AWS::Region}
        SAMPLE_TABLE: !Ref SampleTable
        USERPOOL_ID: !Ref UserPool
        USERPOOL_CLIENT_ID: !Ref UserPoolTokenClient
        ITEM_QUEUE: !Ref WriteQueue
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  ApiResource:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: True
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/function
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 2048
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Environment:
        Variables:
          npm_config_cache: "/opt/nodejs/.npm"
          CYPRESS_CACHE_FOLDER: "/opt/nodejs/.cache"
      Layers:
        - !Ref libs
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SampleTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiResource
            Path: /
            Method: GET

  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: chatapp-libs
      Description: Dependencies for the blank sample app.
      ContentUri: src/layer
      CompatibleRuntimes:
        - nodejs12.x

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiResource}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
